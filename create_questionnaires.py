import os
import pandas as pd
from docx import Document
from docx.shared import Pt

import random

QUESTIONNAIRES_PATH = 'data/questionnaires'


def get_sampled_experiments(df):
    # Group the test_df by the 'person' field
    grouped = df.groupby('person')

    # Initialize the output list to hold the results
    experiment_results = []

    # Perform the sampling 60 times
    for _ in range(60):
        # Sample 5 unique persons
        sampled_persons = random.sample(sorted(grouped.groups.keys()), 5)

        # Initialize a list to hold the tuples for this iteration
        iteration_result = []

        # For each sampled person, get the corresponding rows and add the (target, message) tuples to the list
        for person in sampled_persons:
            person_rows = grouped.get_group(person)
            tuples = [(row['target'], row['message'])
                      for _, row in person_rows.iterrows()]
            iteration_result.extend(tuples)

        # Append the result of this iteration to the experiment results
        experiment_results.append(iteration_result)

    # experiment_results now holds 60 lists, each containing 10 tuples.
    return experiment_results


# Function to create a questionnaire


def create_questionnaire(doc, results, num_single):

    # Divide the 10-items list into 5 consecutive tuple pairs corresponding to the same person.
    tuple_pairs = [results[i:i+2] for i in range(0, len(results), 2)]

    # Randomly sample `num_single` persons for the single message questions
    single_message_pairs = random.sample(tuple_pairs, num_single)

    # The remaining pairs will be used for paired message questions
    paired_message_pairs = [
        pair for pair in tuple_pairs if pair not in single_message_pairs]

    # Add title
    doc.add_heading('Phishing Questionnaire', 0)

    # Add introduction
    doc.add_paragraph(
        "Thank you for participating in this study on phishing message detection. "
        "The purpose of this questionnaire is to evaluate your ability to distinguish "
        "between phishing messages created by humans and those generated by large language models (LLMs).\n\n"
        "In this questionnaire, you will be presented with two types of tasks:")
    doc.add_paragraph(
        "Single Message Evaluation: You will be shown a single phishing message. "
        "Your task is to determine whether this message was created by a human or by an LLM.", style='List Number')
    doc.add_paragraph(
        "Paired Message Evaluation: You will be shown two phishing messages that supposedly originate "
        "from the same user. Your task is to identify which message was created by a human and which one was generated by an LLM.", style="List Number")
    doc.add_paragraph(
        "Please read each message carefully and select your decision by circling the correct choice."
    )

    # Single message questions
    doc.add_heading('Single Message Questions', level=1)

    answers = []
    for pair in single_message_pairs:
        random.shuffle(pair)
        selected_message = pair[0][1]
        doc.add_heading('Phishing message:', level=2)
        doc.add_paragraph(f"{selected_message}")
        answers_paragraph = doc.add_paragraph()
        run = answers_paragraph.add_run("Answer:")
        run.font.size = Pt(12)  # Adjust font size if needed
        run.bold = True
        run = answers_paragraph.add_run("\t\tHuman\t\t|\t\tLLM\n")
        run.font.size = Pt(12)

        answers.append(('single', pair[0][1], pair[0][0]))

    # Paired message questions
    doc.add_heading('Paired Message Questions', level=1)
    for pair in paired_message_pairs:
        random.shuffle(pair)
        doc.add_heading('Phishing message A:', level=2)
        doc.add_paragraph(f"{pair[0][1]}")
        doc.add_heading('Phishing message B:', level=2)
        doc.add_paragraph(f"{pair[1][1]}")
        answers_paragraph = doc.add_paragraph()
        run = answers_paragraph.add_run("Answers:")
        run.font.size = Pt(12)  # Adjust font size if needed
        run.bold = True
        doc.add_paragraph(
            "Phishing message A:\t\tHuman\t\t|\t\tLLM", style='List Bullet')
        doc.add_paragraph(
            "Phishing message B:\t\tHuman\t\t|\t\tLLM\n", style='List Bullet')

        answers.append(
            ('paired', pair[0][1], pair[0][0], pair[1][1], pair[1][0]))

    return answers


def create_answers_df(questionnaires_answers):
    questionnaire_number_col = [i for i in range(1, 61) for _ in range(5)]
    questionnaire_question_num_col = [
        i for _ in range(60) for i in range(1, 6)]

    # Add questions and answers to the DF
    questions_col = []
    answers_col = []
    for questionnaire in questionnaires_answers:
        questionnaire_answers = []
        for question in questionnaire:
            if question[0] == 'single':
                questions_col.append(question[1])
                questionnaire_answers.append(f'{question[2]}')
            else:
                # Paired question
                questions_col.append(f'A: {question[1]}\n\nB:{question[3]}')
                questionnaire_answers.append(
                    f'A:{question[2]},B:{question[4]}')
        answers_col.extend(questionnaire_answers)

    return pd.DataFrame(data={'Questionnaire number': questionnaire_number_col, 'Question number': questionnaire_question_num_col, 'Question': questions_col, 'Answer': answers_col})


if __name__ == "__main__":
    # Load dataset from HF
    splits = {'validation': 'validation.csv',
              'test': 'llmvshuman_test_corrected.csv'}
    val_df = pd.read_csv(
        "hf://datasets/tomshe/turing_phishing_selection/" + splits["validation"])
    test_df = pd.read_csv(
        "hf://datasets/tomshe/turing_phishing_selection/" + splits["test"])

    # Make sure there's no row w/ a missing human / llm annotation
    grouped = test_df.groupby('person')
    test_df = grouped.filter(lambda x: len(x) > 1).reset_index()

    sampled_experiments = get_sampled_experiments(test_df)

    # Create 60 questionnaires
    questionnaires_answers = []
    for i, result in enumerate(sampled_experiments, 1):
        doc = Document()

        # 30 questionnaires with 3 single and 2 paired, 30 with 2 single and 3 paired
        if i <= 30:
            answers = create_questionnaire(doc, result, num_single=3)
        else:
            answers = create_questionnaire(doc, result, num_single=2)
        questionnaires_answers.append(answers)

        # Save the document
        doc_path = f'{QUESTIONNAIRES_PATH}/questionnaire_{i}.docx'
        doc.save(doc_path)
        print(f"Questionnaire {i} saved to {doc_path}")

    print("Creating and saving CSV to track and analyze questionnaire results")
    answers_df = create_answers_df(questionnaires_answers)
    answers_df.to_csv(
        './data/questionnaires/questionnaires_answers.csv', index=False)
